Exercício 1: Escreva um programa que leia um vetor de 15 números inteiros e exiba ao final apenas os números que estão 
armazenados nas posições pares do vetor.

int x;
int[] numeros = new int[15];
// Laço for para percorrer os índices do vetor e atribuir um valor em cada posição
for (x=0;x<15;x++){
	Console.Write("Digite o {0}º valor: ",x+1);
	numeros[x]=int.Parse(Console.ReadLine());
}
// Laço for para mostrar as posições pares do vetor
for (x=0;x<15;x=x+2){
	Console.WriteLine(numeros[x]);
}

Console.ReadKey();

Exercício 2: Escreva um programa que leia o nome e o preço de 10 produtos. Logo após realizar o cadastro dos produtos, 
pedir para o usuário digitar um valor, no qual deverá ser realizada uma pesquisa e exibir apenas os produtos que possuem 
preço até o valor digitado pelo usuário.

int i;
string[] produtos = new string[10];
double[] precos = new double[10];
double pesquisa;

for (i=0;i<10;i++){
	Console.Write("Digite o nome do {0}º produto: ",i+1);
	produtos[i]=Console.ReadLine();
	Console.Write("Digite o preço do produto: ");
	precos[i]=double.Parse(Console.ReadLine());
}

Console.WriteLine("Digite o preço a pesquisar: ");
pesquisa=double.Parse(Console.ReadLine());

for (i=0;i<10;i++){
	if (precos[i]<=pesquisa){
		Console.WriteLine("Produto: "+produtos[i]+" Preço: "+precos[i]);
	}
}

Console.ReadKey();

Exercício 3: Escreva um programa que leia uma matriz (3x5 ou 5x3) de 15 números inteiros e exiba ao final a soma dos valores 
de cada linha que estão armazenados nesta matriz.

int l,c,res;
int[,] numeros = new int[3,5];

for (l=0;l<3;l++){
	for (c=0;c<5;c++){
		Console.Write("Digite o valor da posição [{0}][{1}]: ",l+1,c+1);
		numeros[l,c]=int.Parse(Console.ReadLine());
	}
}

for (l=0;l<3;l++){
	res=0;
	for (c=0;c<5;c++){
		res=res+numeros[l,c];
	}
	Console.WriteLine("{0}ª linha: {1}",l+1,res);
}

Console.ReadKey();

Exercício 4: Escreva um programa que armazene os números de 1 a 25 em uma matriz 5x5 e ao final exiba apenas os valores das 
diagonais desta matriz.

int[,] matriz = {{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15},{16,17,18,19,20},{21,22,23,24,25}};

Console.WriteLine(matriz[0,0]);
Console.WriteLine(matriz[1,1]);
Console.WriteLine(matriz[2,2]);
Console.WriteLine(matriz[3,3]);
Console.WriteLine(matriz[4,4]);
Console.WriteLine(matriz[0,4]);
Console.WriteLine(matriz[1,3]);
Console.WriteLine(matriz[3,1]);
Console.WriteLine(matriz[4,0]);

Console.ReadKey();

Exercício 5: Escreva um programa que leia o nome de 10 alunos (vetor). Para cada aluno devem ser registradas 3 notas (matriz). 
Calcular a média das notas de cada aluno e armazenar em um vetor. Ao final deverá ser exibido na tela um relatório com os dados 
de todos os alunos (nome, notas, media) e também a informação se o aluno foi aprovado ou reprovado (média para aprovação 7,0). 
Para o caso de aprovado exibir todos os dados do aluno na cor azul, caso contrário exibir os dados na cor vermelha.(Dica: usar 
os comandos Console.ForegroundColor = ConsoleColor.Red e Console.ForegroundColor = ConsoleColor.Blue);

string[] alunos = new string[10];
double[,] notas = new double[10,3];
double[] medias = new double[10];
int x,y;

for (x=0;x<10;x++){
	Console.Write("Nome do {0}º aluno: ",(x+1));
	alunos[x]=Console.ReadLine();
	for (y=0;y<3;y++){
		Console.Write("Nota {0}ª: ",(y+1));
		notas[x,y]=double.Parse(Console.ReadLine());
	}
	medias[x]=(notas[x,0]+notas[x,1]+notas[x,2])/3;
}

Console.WriteLine("Nomes                Notas          Média Situação");
for (x=0;x<10;x++){
	if (medias[x]>=7){
		Console.ForegroundColor = ConsoleColor.Blue;	
	}
	else{
		Console.ForegroundColor = ConsoleColor.Red;
	}
	Console.WriteLine("{0:-20} {1:N1} {2:N1} {3:N1} {4:N1} {5}",alunos[x],notas[x,0],notas[x,1],notas[x,2],medias[x],(medias[x]>=7?"Aprovado":"Reprovado"));
}

Console.ReadKey();

Exercício 6: Implemente um jogo básico do clássico “Jogo da Velha”. Onde deverá ser usada uma matriz 3x3. (Dicas: Para 
identificar o jogador, utilizar uma variável que servirá como um contador, e para contador sendo par associa-se a jogada 
sendo do jogador 1, senão, em caso de ímpar associa-se ao jogador 2; A matriz pode ser do tipo char para armazenar ‘O’ e ‘X’, 
ou também do tipo int para armazenar 1 e 2, idendificando o número do jogador).

            // declaração das variáveis
            int jogador = 1, jogadas=0; // jogador --> jogador que está na vez 1 ou 2, jogadas --> quantidade de jogadas
            char[,] velha = new char[3, 3]; // matriz com as posições do jogo da velha
            int l,c; // variável utilizada no for
            int jogada; // variável da posição da jogada do jogador
            char simbolo; // guarda o caracter X ou O para mostrar no jogo da velha
            bool valida, vencedor=false; // valida --> (true) jogada válida ou (false) jogada inválida, vencedor --> se há vencedor no jogo (true) ou não (false)

            // inicializa a matriz com os valores 1,2,3,4,5,6,7,8,9
            for (l = 0; l < 3; l++)
            {
                for (c = 0; c < 3; c++)
                {
                    velha[l, c] = Convert.ToChar((l*3+(c+1)).ToString());
                }
            }

            // loop do jogo
            do
            {
                Console.Clear(); // limpa a tela

                // mostra o jogo da velha
                for (l = 0; l < 3; l++)
                {
                    for (c = 0; c < 3; c++)
                    {
                        Console.Write(velha[l, c] + (c < 2 ? "|" : ""));
                    }
                    if (l < 2)
                    {
                        Console.WriteLine("\n-----");
                    }
                }
                Console.Write("\n\n");
                // pedir a posição para o jogador
                Console.Write("Jogador {0}, escolha uma posição: ", jogador);

                jogada = int.Parse(Console.ReadLine());

                simbolo = jogador == 1 ? 'X' : 'O'; // determina se é X ou O que irá aparecer

                valida = false; // inicializa como jogada inválida

                // verifica se a jogada é válida
                if (jogada==1 && velha[0,0]!='X' && velha[0, 0] != 'O')
                {
                    velha[0, 0] = simbolo; // coloca o símbolo na posição escolhida
                    valida = true; // jogada válida
                }
                if (jogada == 2 && velha[0, 1] != 'X' && velha[0, 1] != 'O')
                {
                    velha[0, 1] = simbolo;
                    valida = true;
                }
                if (jogada == 3 && velha[0, 2] != 'X' && velha[0, 2] != 'O')
                {
                    velha[0, 2] = simbolo;
                    valida = true;
                }
                if (jogada == 4 && velha[1, 0] != 'X' && velha[1, 0] != 'O')
                {
                    velha[1, 0] = simbolo;
                    valida = true;
                }
                if (jogada == 5 && velha[1, 1] != 'X' && velha[1, 1] != 'O')
                {
                    velha[1, 1] = simbolo;
                    valida = true;
                }
                if (jogada == 6 && velha[1, 2] != 'X' && velha[1, 2] != 'O')
                {
                    velha[1, 2] = simbolo;
                    valida = true;
                }
                if (jogada == 7 && velha[2, 0] != 'X' && velha[2, 0] != 'O')
                {
                    velha[2, 0] = simbolo;
                    valida = true;
                }
                if (jogada == 8 && velha[2, 1] != 'X' && velha[2, 1] != 'O')
                {
                    velha[2, 1] = simbolo;
                    valida = true;
                }
                if (jogada == 9 && velha[2, 2] != 'X' && velha[2, 2] != 'O')
                {
                    velha[2, 2] = simbolo;
                    valida = true;
                }

                Console.Clear(); // limpa a tela

                // mostra o jogo da velha
                for (l = 0; l < 3; l++)
                {
                    for (c = 0; c < 3; c++)
                    {
                        Console.Write(velha[l, c] + (c < 2 ? "|" : ""));
                    }
                    if (l < 2)
                    {
                        Console.WriteLine("\n-----");
                    }
                }

                if (valida)
                {
                    jogador = jogador == 1 ? 2 : 1; // troca de jogador
                    jogadas++; // incrementa a quantidade de jogadas

                    // Verifica se houve vencedor
                    if (velha[0, 0] == velha[0, 1] && velha[0, 0] == velha[0, 2]) vencedor = true;
                    if (velha[1, 0] == velha[1, 1] && velha[1, 0] == velha[1, 2]) vencedor = true;
                    if (velha[2, 0] == velha[2, 1] && velha[2, 0] == velha[2, 2]) vencedor = true;
                    if (velha[0, 0] == velha[1, 0] && velha[0, 0] == velha[2, 0]) vencedor = true;
                    if (velha[0, 1] == velha[1, 1] && velha[0, 1] == velha[2, 1]) vencedor = true;
                    if (velha[0, 2] == velha[1, 2] && velha[0, 2] == velha[2, 2]) vencedor = true;
                    if (velha[0, 0] == velha[1, 1] && velha[0, 0] == velha[2, 2]) vencedor = true;
                    if (velha[0, 2] == velha[1, 1] && velha[0, 2] == velha[2, 0]) vencedor = true;

                    if (vencedor) Console.Write("\n\nJogador {0} venceu!!!", simbolo == 'X' ? 1 : 2);
                }
                else
                {
                    Console.Write("\n\nJogada inválida!!! Pressione uma tecla...");
                    Console.ReadKey();
                }

            } while (jogadas < 9 && !vencedor); // continua enquanto a quantidade de jogadas for menor que 9 e não houver vencedor

            // Verifica se não houve vencedor
            if (!vencedor) Console.Write("\n\nVelha!!!");
            Console.ReadKey();
